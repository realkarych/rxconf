{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RxConf","text":"<p> RxConf library, easy to use, powerful and flexible for realtime configuration management in Python </p> <p> </p> <p>TL;DR: <code>pip install rxconf</code></p> <p>Source code: https://github.com/realkarych/rxconf/</p>  Currently in develop...   The first stable version will be 0.1.0   Roadmap  <ul> <li>[ ] Public Docs at https://realkarych.github.io/rxconf/ (#87).</li> <li>[x] Docstrings for all public scope interfaces (#88).</li> <li>[ ] Integration tests for RxConf (#89).</li> <li>[ ] Async version of VaultConfig (#90).</li> <li>[x] Async version of RxConf (#91).</li> </ul>"},{"location":"api/rxconf/","title":"In develop","text":""},{"location":"concepts/asynchronous/","title":"In develop","text":""},{"location":"concepts/observers/","title":"In develop","text":""},{"location":"concepts/rxconf/","title":"In develop","text":""},{"location":"concepts/triggers/","title":"In develop","text":""},{"location":"contributing/guidelines/","title":"Contributing Guidelines","text":"<p>Thank you for your interest in contributing to RxConf!</p> <p>Please take a moment to review the following guidelines before submitting your contribution.</p>"},{"location":"contributing/guidelines/#getting-started","title":"Getting Started","text":"<p>Setup your development environment: Setup guide.</p>"},{"location":"contributing/guidelines/#submitting-contributions","title":"Submitting Contributions","text":"<p>When submitting your contribution, please ensure the following:</p> <ul> <li>Minimized count of commits.</li> <li>Your code follows our code style guidelines.</li> <li>Your changes are well-documented and include any necessary updates to the project's documentation.</li> <li>Your changes do not introduce any breaking changes or regressions.</li> <li>Provided descriptive commits' titles. Use emoji notation:</li> </ul> Topic Alias Version tag \ud83d\udd16 <code>:bookmark:</code> New feature \u2728 <code>:sparkles:</code> Bugfix \ud83d\udc1b <code>:bug:</code> Documentation \ud83d\udcda <code>:books:</code> Performance \ud83c\udfc7 <code>:racehorse:</code> Tests \u2705 <code>:white_check_mark:</code> General update \ud83d\ude80 <code>:rocket:</code> Improve format/structure \ud83c\udfa8 <code>:art:</code> Refactor code \ud83d\udd28 <code>:hammer:</code> Removing code/files \ud83d\udd25 <code>:fire:</code> Continuous Integration \ud83d\udc77 <code>:construction_worker:</code> Security \ud83d\udd12 <code>:lock:</code> Upgrading dependencies \u2b06\ufe0f <code>:arrow_up:</code> Downgrading dependencies \u2b07\ufe0f <code>:arrow_down:</code> Critical hotfix \ud83d\ude91 <code>:ambulance:</code> Configuration files \ud83d\udd27 <code>:wrench:</code> Reverting changes \u23ea <code>:rewind:</code> Breaking changes \ud83d\udca5 <code>:boom:</code> Movements \ud83d\ude9a <code>:truck:</code>"},{"location":"contributing/guidelines/#code-style","title":"Code Style","text":"<p>We follow a specific code style in our project. Please make sure to adhere to the following guidelines:</p> <ul> <li>Follow all PEP8 guidelines.</li> <li>Use meaningful variable and function names.</li> <li>Avoid of addition comments.</li> <li>Add docstrings for all public interfaces.</li> <li>Follow the main Clean Code patterns.</li> </ul>"},{"location":"contributing/guidelines/#testing","title":"Testing","text":"<p>We highly encourage contributors to write tests for their code. Please ensure that your changes are thoroughly tested and that all existing tests pass.</p> <p>Our goal is to have 100% of code coverage (for public interfaces).</p>"},{"location":"contributing/guidelines/#documentation","title":"Documentation","text":"<p>Documentation deploys automatically via pushing to main.</p> <p>Improving the project's documentation is always appreciated. If you make any changes that require updates to the documentation, please include those updates in your contribution.</p>"},{"location":"contributing/guidelines/#issue-reporting","title":"Issue Reporting","text":"<p>If you encounter any issues or have any suggestions for improvement, please open an issue on our issue tracker.</p> <p>Provide as much detail as possible to help us understand and address the problem.</p>"},{"location":"contributing/issues/","title":"Submitting","text":"<ul> <li>Submit issues &amp; bugs: https://github.com/realkarych/rxconf/issues.</li> <li>If you have an idea, welcome to https://github.com/realkarych/rxconf/discussions/45.</li> <li>Feel free to write PM (SLA 24 hours): https://karych.t.me/ or EMail: <code>karych@karych.ru</code></li> </ul>"},{"location":"contributing/setup/","title":"Environment setup","text":""},{"location":"contributing/setup/#clone-repository","title":"Clone repository","text":"<ul> <li>Via https: <code>git clone https://github.com/realkarych/rxconf.git</code></li> <li>Via ssh: <code>git@github.com:realkarych/rxconf.git</code></li> <li>Via GitHub CLI: <code>gh repo clone realkarych/rxconf</code></li> </ul>"},{"location":"contributing/setup/#install-poetry","title":"Install poetry","text":"<ul> <li>MacOS / *nix: <code>curl -sSL https://install.python-poetry.org | python3 -</code></li> <li>Windows: <code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -</code></li> </ul> <p>Once Poetry is installed you can execute the following:</p> <pre><code>poetry --version\n</code></pre>"},{"location":"contributing/setup/#install-dev-dependencies","title":"Install dev-dependencies","text":"<p>Note</p> <p>Assumed that you are in the directory with the project</p> <p>We implemented two versions of required dependencies:</p> <ol> <li><code>poetry install</code> \u2014 default dependencies that installs with package via pip.</li> <li><code>poetry install --with dev</code> \u2014 dependencies that installs with package via pip AND tools for testing, deploying documentation, deploying on PyPI.</li> </ol> <p>You should use the second option.</p>"},{"location":"contributing/setup/#install-act-local-ci","title":"Install Act \u2014 local CI","text":"<p>We use Act for local CI launching.</p> <p>It helps us to test RxConf on different environments use local machines instead of GitHub Actions.</p> <p>After the local CI passes, we contribute code to the origin.</p>"},{"location":"contributing/setup/#build-deploy-docs-locally","title":"Build &amp; deploy docs locally","text":"<p>Note</p> <p>Assumed that you are in the directory with the project and dependencies are already installed.</p> <p>To build and deploy docs locally, run <code>mkdocs serve</code>.</p>"},{"location":"contributing/setup/#build-deploy-docs-on-prod","title":"Build &amp; deploy docs on prod","text":"<p>Warning</p> <p>Our rule is to not deploy documentation to production manually.</p> <p>We use a CI action that automatically deploys the documentation to production whenever changes are pushed to the <code>main</code> branch.</p>"},{"location":"contributing/setup/#deploying-on-test-pypi","title":"Deploying on Test PyPI","text":"<p>Note</p> <p>Requires private access and performs only by core contributors. So you can create your own repo on https://test.pypi.org and provide token.</p> <p>Before deploying to the official PyPI repository, we first upload and test our package on Test PyPI. This allows us to ensure that everything works correctly and to catch any potential issues before making the package publicly available.</p> <ol> <li> <p>Upload to Test PyPI:</p> <ul> <li>Add Test PyPI repo to poetry conf: <code>poetry config repositories.testpypi https://test.pypi.org/legacy/</code>.</li> <li>Add secret to conf: <code>poetry config pypi-token.testpypi &lt;token&gt;</code></li> <li>Publish: <code>poetry publish --repository testpypi</code></li> </ul> </li> <li> <p>Test the package:</p> <p>Install the package from Test PyPI and run tests to ensure everything is working correctly:</p> <p><code>pip install --index-url https://test.pypi.org/simple/rxconf/</code></p> </li> </ol>"},{"location":"contributing/setup/#deploying-on-pypi","title":"Deploying on PyPI","text":"<p>Warning</p> <p>Our rule is to not deploy library on PyPI from local.</p> <p>We use a CI action that automatically deploys the library to https://pypi.org/project/rxconf/ on new version tag introduction.</p>"},{"location":"examples/associate-extensions/","title":"In develop","text":""},{"location":"examples/custom-config/","title":"In develop","text":""},{"location":"examples/projects/","title":"In develop","text":""},{"location":"get-started/quick-dive/","title":"Hello World app using RxConf","text":"<p>Warning</p> <p>It is assumed that you are using Python version &gt;= 3.9 and either CPython or PyPy. It is assumed that Python is installed in PATH.</p>"},{"location":"get-started/quick-dive/#prepare-project","title":"Prepare project","text":"<p>Create directory <code>hello_world</code> and open it.</p>"},{"location":"get-started/quick-dive/#on-unix-or-macos","title":"On Unix or MacOS","text":"<pre><code>python -m venv venv &amp;&amp; source venv/bin/activate\n</code></pre>"},{"location":"get-started/quick-dive/#on-windows","title":"On Windows","text":"<pre><code>python -m venv venv\n.\\venv\\Scripts\\activate\n</code></pre> <p>Then install RxConf:</p> <pre><code>pip install rxconf\n</code></pre>"},{"location":"get-started/quick-dive/#prepare-config-files","title":"Prepare config files","text":""},{"location":"get-started/quick-dive/#testyaml","title":"test.yaml","text":"<pre><code>app:\n    hello_key: Hello\n</code></pre>"},{"location":"get-started/quick-dive/#testtoml","title":"test.toml","text":"<pre><code>[app]\nworld_key = \"World\"\n</code></pre>"},{"location":"get-started/quick-dive/#add-env-variable","title":"Add env variable","text":"<ul> <li>On Unix or MacOS: <code>export APP_EXCLAMATION_MARK=!</code></li> <li>On Windows: <code>set APP_EXCLAMATION_MARK=!</code></li> </ul>"},{"location":"get-started/quick-dive/#lets-manipulate-them-using-rxconf","title":"Let's manipulate them using RxConf","text":"<p>Create <code>main.py</code> in the same directory and open it in your favorite code editor / IDE.</p>"},{"location":"get-started/quick-dive/#firstly-we-want-to-load-our-configs","title":"Firstly, we want to load our configs","text":"<pre><code>from rxconf import Conf\n\nyaml_conf = Conf.from_file(config_path=\"test.yaml\")\ntoml_conf = Conf.from_file(config_path=\"test.toml\")\nenv_conf = Conf.from_env()\n</code></pre> <p>Note</p> <p>RxConf has single interface for all config-types and interface for loading env-variables.</p>"},{"location":"get-started/quick-dive/#so-what-are-yaml_conf-toml_conf-and-env_conf","title":"So what are <code>yaml_conf</code>, <code>toml_conf</code> and <code>env_conf</code>?","text":"<p>If you try to execute <code>type()</code> for them, you will see the heir of <code>MetaConfigType</code>.</p> <p>This is layer that incapsulate Attributes structure model.</p> <p>You can <code>print()</code> them or call <code>repr()</code> to see this structure.</p> <p>Note</p> <p>JFYI: we have MetaConfigResolver that resolves what concrete FileConfigType should be created based on extension.</p>"},{"location":"get-started/quick-dive/#secondly-we-want-to-access-variables","title":"Secondly, we want to access variables","text":"<pre><code>hello_var = yaml_conf.app.hello_key\nworld_var = toml_conf.app.world_key\nexclamation_mark = env_conf.app_exclamation_mark\n</code></pre> <p>Note</p> <p>RxConf has single interface to create indistinguishable interface for all types of configs.</p>"},{"location":"get-started/quick-dive/#so-what-are-hello_var-world_var-and-exclamation_mark","title":"So what are <code>hello_var</code>, <code>world_var</code> and <code>exclamation_mark</code>?","text":"<p>If you try to execute <code>type()</code> for them, you will see the heir of <code>AttributeType</code>.</p> <p>But there are very smart objects. They overrides primitive types, operands etc. and your can work with them as primitives:</p> <pre><code>hello_var + \" \" + world_var + exclamation_mark == \"Hello World!\"\n</code></pre> <p>If you will print the result, you will get <code>True</code>.</p>"},{"location":"get-started/quick-dive/#types-support-type-casting","title":"Types support &amp; Type casting","text":"<p>So AttributeTypes can be converted to primitives if you want:</p> <p><code>str(hello_var) == \"Hello\"</code> \u2014 the string representation of <code>hello_var</code> value.</p>"},{"location":"get-started/quick-dive/#we-supports-all-types-that-supports-metaconfigtype-you-chose","title":"We supports all types that supports MetaConfigType you chose","text":"Type Yaml Toml Json Dotenv Ini <code>str</code> \u2705 \u2705 \u2705 \u2705 \u2705 <code>int</code> \u2705 \u2705 \u2705 \u2705 \u2705 <code>float</code> \u2705 \u2705 \u2705 \u2705 \u2705 <code>bool</code> \u2705 \u2705 \u2705 \u2705 \u2705 <code>None</code> \u2705 \u274c \u274c \u2705 \u2705 <code>list</code> \u2705 \u2705 \u2705 \u274c \u274c <code>set</code> \u2705 \u274c \u274c \u274c \u274c <code>date</code> \u2705 \u2705 \u274c \u274c \u274c <code>datetime</code> \u2705 \u2705 \u274c \u274c \u274c <p>Note</p> <p>You can iterate via <code>AttributeType</code> if it's value's primitive representation is iterable, hash it if it's hashable etc.</p>"},{"location":"get-started/quick-dive/#exceptions-handling","title":"Exceptions handling","text":"<p>All exceptions can be raised by RxConf are inherited from <code>rxconf.exceptions.RxConfError</code>.</p> <p>There are some of them:</p> <ul> <li>Not-existing file: <code>rxconf.exceptions.ConfigNotFoundError</code>.</li> <li>Unknown extension (that is not specified in any <code>FileConfigType</code> registered in <code>MetaConfigResolver</code>): <code>rxconf.exceptions.InvalidExtensionError</code>.</li> <li>Config with broken schema: <code>rxconf.exceptions.BrokenConfigSchemaError</code>.</li> <li>Unknown attribute (e.g. <code>yaml_conf.some.unknown.attr</code>): <code>rxconf.exceptions.InvalidAttributeError</code>.</li> </ul> <p>All existing exceptions your can check in exceptions.py.</p>"},{"location":"get-started/quick-dive/#async-configs","title":"Async configs","text":"<p>RxConf is compatible with Asyncio. To use, import extension for base <code>Conf</code>:</p> <pre><code>from rxconf import Conf\n</code></pre> <p>Then load config:</p> <pre><code>async def main():\n    conf = await Conf.from_file_async(path=\"...\")\n    # Then use conf as same as Conf\n</code></pre> <p>To test, you can run this function with asyncio:</p> <pre><code>import asyncio\nasyncio.run(main())\n</code></pre>"},{"location":"get-started/quick-dive/#observers-hot-reload","title":"Observers &amp; Hot-Reload","text":"<p>In-develop...</p>"},{"location":"get-started/why/","title":"Why Use RxConf?","text":"<ul> <li>Realtime Observers: You can use triggers to specify actions that should occur when configuration attributes change. This helps in organizing hot-reload applications.</li> <li>Scalability: RxConf is designed using OOP patterns and provides interfaces to implement your own ConfigTypes, triggers, and more.</li> <li>Support for Popular Config Types: Currently, RxConf supports <code>yaml</code>, <code>toml</code>, <code>json</code>, <code>ini</code>, <code>dotenv</code> files, and environment variables. And all of these manages through a single interface.</li> <li>Asyncio Support: RxConf is compatible with <code>asyncio</code>, allowing you to use it seamlessly in asynchronous applications.</li> <li>Performance: RxConf uses optimizations and heuristics to control and update config states. Works so fast that you won't even notice it's working. We promise.</li> </ul>"}]}